{
	"Var": {
		"is_apply": false,
		"desc": "Var --> Перем",
		"reg_ex": "^([ \t]*)(Var)([ \t]+)",
		"replace_by": "\\1Перем\\3"
	},
	"Return": {
		"desc": "Return --> Возврат",
		"reg_ex": "^([ \t]+)(Return)([ \t;]*)",
		"replace_by": "\\1Возврат\\3"
	},

	"Try": {
		"is_apply": false,
		"desc": "Try --> Попытка",
		"reg_ex": "^([ \t]+)(Try)([ \t;]*)",
		"replace_by": "\\1Попытка\\3"
	},
	"Except": {
		"is_apply": false,
		"desc": "Except --> Исключение",
		"reg_ex": "^([ \t]+)(Except)([ \t;]*)",
		"replace_by": "\\1Исключение\\3"
	},
	"EndTry": {
		"is_apply": false,
		"desc": "EndTry --> КонецПопытки",
		"reg_ex": "^([ \t]+)(EndTry)([ \t;]*)",
		"replace_by": "\\1КонецПопытки\\3"
	},

	"IfThen": {
		"is_apply": false,
		"desc": "If...Then --> Если...Тогда",
		"reg_ex": "^([ \\t]+)(If)(.+[ \\t]+)(Then)([ \\t]*)$",
		"replace_by": "\\1Если\\3Тогда\\5"
	},
	"ElsIfThen": {
		"is_apply": false,
		"desc": "ElsIf...Then --> ИначеЕсли...Тогда",
		"reg_ex": "^([ \\t]+)(ElsIf)(.+[ \\t]+)(Then)([ \\t]*)$",
		"replace_by": "\\1ИначеЕсли\\3Тогда\\5"
	},
	"Else": {
		"is_apply": false,
		"desc": "Else --> Иначе",
		"reg_ex": "^([ \\t]+)(Else)([ \\t]*)$",
		"replace_by": "\\1Иначе\\3"
	},
	"EndIf": {
		"is_apply": false,
		"desc": "EndIf --> КонецЕсли",
		"reg_ex": "^([ \\t]+)(EndIf)([ \\t;]*)$",
		"replace_by": "\\1КонецЕсли\\3"
	},

	"ForEach": {
		"is_apply": false,
		"desc": "For Each...Do --> Для Каждого...Цикл",
		"reg_ex": "^([ \\t]+)(For Each|Для Каждого)(.+[ \\t]+)(In|Из)(.+[ \\t]+)(Do|Цикл)([ \\t]*)$",
		"replace_by": "\\1Для Каждого\\3Из\\5Цикл\\7"
	},
	"ForTo": {
		"is_apply": false,
		"desc": "For...To...Do --> Для...По...Цикл",
		"reg_ex": "^([ \\t]+)(For|Для)(.+[ \\t]+)(To|По)(.+[ \\t]+)(Do|Цикл)([ \\t]*)$",
		"replace_by": "\\1Для\\3По\\5Цикл\\7"
	},
	"While": {
		"is_apply": false,
		"desc": "While...Do --> Пока...Цикл",
		"reg_ex": "^([ \\t]+)(While)(.+[ \\t]+)(Do)([ \\t]*)$",
		"replace_by": "\\1Пока\\3Цикл\\5"
	},
	"EndDo": {
		"is_apply": false,
		"desc": "EndDo --> КонецЦикла",
		"reg_ex": "^([ \\t]+)(EndDo)([ \\t;]*)$",
		"replace_by": "\\1КонецЦикла\\3"
	},

	"Comma": {
		"is_apply": false,
		"desc": "пробел после запятой",
		"reg_ex": ",[ ]*",
		"replace_by": ", "
	},
	"SignAssignment": {
		"is_apply": false,
		"desc": "рефакторинг операции присваивания",
		"reg_ex": "[ ]*=[ ]*",
		"replace_by": " = "
	},
	"TrailingSpaces": {
		"is_apply": false,
		"desc": "удаление концевых пробелов",
		"reg_ex": "[ \\t]+$",
		"replace_by": ""
	},
	"FunctionsGaps ": {
		"is_apply": false,
		"desc": "сворачиваем промежутки между функциями (процедурами)",
		"reg_ex": "(?<=Конец(Функции)|(Процедуры))\\s*(?=(Функция|Процедура|&На))",
		"replace_by": "\\n\\n"
	}

}
